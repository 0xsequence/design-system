{"version":3,"file":"ThemeProvider.fe0bbfac.js","sources":["../../src/components/ThemeProvider/ThemeProvider.tsx"],"sourcesContent":["import {\n  createContext,\n  PropsWithChildren,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react'\n\nconst THEMES = ['dark', 'light'] as const\n\ntype Theme = typeof THEMES[number]\n\nconst DEFAULT_THEME = 'dark'\nconst THEME_ATTR = 'data-theme'\nconst STORAGE_KEY = '@sequence.theme'\n\ninterface ThemeContextValue {\n  theme: Theme\n  setTheme: (mode: Theme) => void\n}\n\ninterface ThemeProviderProps {\n  theme?: Theme\n}\n\nconst getTheme = (): Theme => {\n  const persistedTheme = localStorage.getItem(STORAGE_KEY) as Theme\n\n  if (THEMES.includes(persistedTheme)) {\n    return persistedTheme\n  } else if (matchMedia(`(prefers-color-scheme: light)`).matches) {\n    return 'light'\n  } else if (matchMedia(`(prefers-color-scheme: dark)`).matches) {\n    return 'dark'\n  }\n\n  return DEFAULT_THEME\n}\n\nconst ThemeContext = createContext<ThemeContextValue | null>(null)\n\nexport const ThemeProvider = (props: PropsWithChildren<ThemeProviderProps>) => {\n  const [theme, setTheme] = useState<Theme>(props.theme || getTheme())\n\n  // Allow prop theme override\n  useEffect(() => {\n    if (props.theme) {\n      setTheme(props.theme)\n    }\n  }, [props.theme])\n\n  // Set the data-theme attribtute on the document root element\n  useEffect(() => {\n    const root = document.querySelector(':root')\n\n    if (root) {\n      root.setAttribute(THEME_ATTR, theme)\n    }\n  }, [theme])\n\n  // Create the context value\n  const value: ThemeContextValue = useMemo(() => {\n    return {\n      theme,\n      setTheme: (mode: Theme) => {\n        // Save to local storage\n        localStorage.setItem(STORAGE_KEY, mode)\n\n        // Set the theme state which will cause a re-render\n        setTheme(mode)\n      },\n    }\n  }, [theme])\n\n  return (\n    <ThemeContext.Provider value={value}>\n      {props.children}\n    </ThemeContext.Provider>\n  )\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext)\n\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider')\n  }\n\n  return context\n}\n"],"names":["THEMES","DEFAULT_THEME","THEME_ATTR","STORAGE_KEY","getTheme","__name","persistedTheme","ThemeContext","createContext","ThemeProvider","props","theme","setTheme","useState","useEffect","root","value","useMemo","localStorage","_jsx","children","useTheme","context","useContext"],"mappings":"+HASA,MAAAA,EAAA,CAAA,OAAA,OAAA,EAIAC,EAAA,OACAC,EAAA,aACAC,EAAA,kBAWAC,EAAAC,EAAA,IAAA,CACE,MAAAC,EAAA,aAAA,QAAAH,CAAA,EAEA,OAAAH,EAAA,SAAAM,CAAA,EACEA,EAAOA,WAAAA,+BAAAA,EAAAA,QAEP,QAAO,WAAA,8BAAA,EAAA,QAEP,OAGFL,CACF,EAZA,YAcAM,EAAAC,EAAAA,QAAAA,cAAA,IAAA,EAEOC,EAAAJ,EAAAK,GAAA,CACL,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAAA,QAAAA,SAAAH,EAAA,OAAAN,EAAA,CAAA,EAGAU,EAAAA,QAAAA,UAAAA,IAAAA,CACEJ,EAAA,OACEE,EAAAA,EAAAA,KAAAA,CACF,EAAA,CAAAF,EAAA,KAAA,CAAA,EAIFI,EAAAA,QAAAA,UAAAA,IAAAA,CACE,MAAAC,EAAA,SAAA,cAAA,OAAA,EAEAA,GACEA,EAAAA,aAAAA,EAAAA,CAAAA,CACF,EAAA,CAAAJ,CAAA,CAAA,EAIF,MAAAK,EAAAC,EAAAA,QAAAA,QAAA,KACE,CAAO,MAAAN,EACLA,SAAAA,GAAAA,CAGEO,aAAAA,QAAAA,EAAAA,CAAAA,EAGAN,EAAAA,CAAAA,CAAa,CACf,GACF,CAAAD,CAAA,CAAA,EAGF,OAAAQ,EAAAZ,EAAA,SAAA,CACwB,MAAAS,EAAC,SAAAN,EAAA,QACdU,CAAAA,CAGb,EAtCO,iBAwCAC,EAAAhB,EAAA,IAAA,CACL,MAAAiB,EAAAC,qBAAAhB,CAAA,EAEA,GAAA,CAAAe,EACE,MAAA,IAAA,MAAA,8CAAA,EAGF,OAAAA,CACF,EARO"}