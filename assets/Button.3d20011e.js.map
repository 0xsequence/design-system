{"version":3,"file":"Button.3d20011e.js","sources":["../../src/components/Button/Button.tsx"],"sourcesContent":["import { clsx } from 'clsx'\nimport { forwardRef, ElementType, ComponentType, ReactNode } from 'react'\n\nimport {\n  Box,\n  PolymorphicComponent,\n  PolymorphicProps,\n  PolymorphicRef,\n} from '~/components/Box'\nimport { Text } from '~/components/Text'\nimport { IconProps } from '~/icons/types'\n\nimport { buttonVariants, iconVariants, ButtonVariants } from './styles.css'\n\ntype ButtonProps = ButtonVariants & {\n  disabled?: boolean\n  pending?: boolean\n  label?: ReactNode\n  width?: 'full' | 'normal'\n  LeftIcon?: ComponentType<IconProps>\n  RightIcon?: ComponentType<IconProps>\n}\n\nexport const Button: PolymorphicComponent<ButtonProps, 'button'> = forwardRef(\n  <T extends ElementType>(\n    props: PolymorphicProps<ButtonProps, T>,\n    ref: PolymorphicRef<T>\n  ) => {\n    const {\n      as = 'button',\n      className,\n      disabled = false,\n      pending = false,\n      label,\n      LeftIcon,\n      RightIcon,\n      size = 'md',\n      variant = 'glass',\n      width = 'normal',\n      ...boxProps\n    } = props\n\n    const iconOnly = LeftIcon !== undefined && label === undefined\n    const clickable = !disabled && !pending\n\n    return (\n      <Box\n        as={as}\n        className={clsx(\n          className,\n          buttonVariants({\n            clickable,\n            disabled: disabled || pending,\n            iconOnly,\n            size: variant === 'text' ? undefined : size,\n            variant,\n            width,\n          })\n        )}\n        disabled={disabled || pending}\n        ref={ref}\n        {...boxProps}\n      >\n        <Box\n          as=\"span\"\n          justifyContent=\"space-between\"\n          alignItems=\"center\"\n          gap={size === 'xs' ? '1' : '2'}\n        >\n          <Box\n            as=\"span\"\n            justifyContent=\"flex-start\"\n            alignItems=\"center\"\n            gap={size === 'xs' ? '1' : '2'}\n          >\n            {LeftIcon && <LeftIcon className={iconVariants({ size })} />}\n            {!iconOnly && <Text>{label}</Text>}\n          </Box>\n\n          {RightIcon && <RightIcon className={iconVariants({ size })} />}\n        </Box>\n      </Box>\n    )\n  }\n)\n"],"names":["Button","forwardRef","props","ref","as","className","pending","label","LeftIcon","RightIcon","variant","width","boxProps","iconOnly","_jsx","Box","clsx","buttonVariants","disabled","clickable","size","_jsxs","iconVariants","Text"],"mappings":"+nDAuBO,MAAAA,EAAAC,EAAA,QAAA,WAAA,CAAAC,EAAAC,IAAA,CAKH,KAAA,CAAM,GAAAC,EAAA,SACC,UAAAC,EACLA,SAAAA,EAAAA,GACW,QAAAC,EAAA,GACD,MAAAC,EACVA,SAAAA,EACAC,UAAAA,EACAC,KAAAA,EAAAA,KACO,QAAAC,EAAA,QACG,MAAAC,EAAA,YACFC,CACLA,EAAAA,EAGLC,EAAAL,IAAA,QAAAD,IAAA,OAGA,OAAAO,EAAAC,EAAA,CACM,GAAAX,EACF,UAAAY,EAAAX,EAAAY,EAAA,CAGiB,UAPrB,CAAAC,GAAA,CAAAZ,EAQQa,SAAAA,GAAAA,EACsBb,SAAAA,EACtBO,KAAAA,IAAAA,OAAAA,OAAAA,EACuCO,QAAAA,EACvCV,MAAAA,CACAC,CAAAA,CAAAA,EACA,SAAAO,GAAAZ,EAEkBA,IAAAA,EACtB,GAAAM,EACIA,SAAAA,EAAAA,EAAAA,CAEA,GAAA,OACC,eAAA,gBACY,WAAA,SACJ,IAAAQ,IAAA,KAAA,IAAA,IACgB,SAAA,CAAAC,EAAAN,EAAA,CAEvB,GAAA,OACC,eAAA,aACY,WAAA,SACJ,IAAAK,IAAA,KAAA,IAAA,IACgB,SAAA,CAAAZ,GAAAM,EAAAN,EAAA,CAEL,UAAAc,EAAA,CAAyB,KAAAF,CAAEA,CAAAA,CAAM,CAAA,EAAA,CAAAP,GAAAC,EAAAS,EAAA,CACpC,SAAAhB,CAAEA,CAAAA,CAAAA,CAAa,CAAA,EAAAE,GAAAK,EAAAL,EAAA,CAGZ,UAAAa,EAAA,CAAyB,KAAAF,CAAEA,CAAAA,CAAM,CAAA,CAAA,CAAK,CAAA,CAAA,CAAA,CAItE,CAAA"}