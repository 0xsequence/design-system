{"version":3,"file":"NumericInput-33a8091e.js","sources":["../../src/components/NumericInput/NumericInput.tsx"],"sourcesContent":["import { ChangeEvent, FocusEvent, forwardRef } from 'react'\n\nimport { PolymorphicProps, PolymorphicRef } from '../Box'\nimport { TextInput } from '../TextInput'\nimport { TextInputProps } from '../TextInput/TextInput'\n\nconst inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`)\n\nexport function escapeRegExp(string: string): string {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\n}\n\nexport type NumericInputProps = TextInputProps & {\n  name?: string\n  decimals?: number\n}\n\nexport const NumericInput = forwardRef(\n  (\n    props: PolymorphicProps<NumericInputProps, 'input'>,\n    ref: PolymorphicRef<'input'>\n  ) => {\n    const { name = 'amount', placeholder, onChange, onBlur, ...rest } = props\n\n    const handleChange = (ev: ChangeEvent<HTMLInputElement>) => {\n      let { value } = ev.target\n\n      // Replace commas with decimals\n      value = value.replace(/,/g, '.')\n\n      // Add leading zero if needed\n      if (value.startsWith('.')) {\n        value = '0' + value\n      }\n\n      // strip leading zeros\n      if (value.startsWith('0')) {\n        value = value.replace(/^0+(?=\\d)/, '')\n      }\n\n      if (value === '' || inputRegex.test(escapeRegExp(value))) {\n        onChange?.({ ...ev, target: { ...ev.target, value } })\n      }\n    }\n\n    const handleBlur = (ev: FocusEvent<HTMLInputElement>) => {\n      const { value } = ev.target\n\n      let v = value\n\n      if (v.endsWith('.')) {\n        v = v.slice(0, -1)\n      }\n\n      if (v.endsWith('.0')) {\n        v = v.slice(0, -2)\n      }\n\n      if (v === '0') {\n        v = ''\n      }\n\n      onBlur?.(ev)\n\n      if (v !== value) {\n        onChange?.({ ...ev, target: { ...ev.target, value: v } })\n      }\n    }\n\n    return (\n      <TextInput\n        name={name}\n        onChange={handleChange}\n        onBlur={handleBlur}\n        inputMode=\"decimal\"\n        autoComplete=\"off\"\n        autoCorrect=\"off\"\n        type=\"text\"\n        pattern=\"^[0-9]*[.,]?[0-9]*$\"\n        placeholder={placeholder || '0'}\n        minLength={1}\n        maxLength={79}\n        spellCheck=\"false\"\n        ref={ref}\n        {...rest}\n      />\n    )\n  }\n)\n"],"names":["inputRegex","escapeRegExp","string","NumericInput","forwardRef","props","ref","name","placeholder","onChange","onBlur","rest","jsx","TextInput","ev","value","v"],"mappings":"4IAMA,MAAAA,EAAA,OAAA,wBAAA,EAEO,SAAAC,EAAAC,EAAA,CACL,OAAAA,EAAA,QAAA,sBAAA,MAAA,CACF,CAOO,MAAAC,EAAAC,EAAA,WAAqB,CAAAC,EAAAC,IAAA,CAKxB,KAAA,CAAA,KAAAC,EAAA,SAAA,YAAAC,EAAA,SAAAC,EAAA,OAAAC,KAAAC,CAAA,EAAAN,EA+CA,OAAAO,EACEC,EAAC,CAAA,KAAAN,EACC,SA/CJO,GAAA,CACE,GAAA,CAAA,MAAAC,CAAA,EAAAD,EAAA,OAGAC,EAAAA,EAAA,QAAA,KAAA,GAAA,EAGAA,EAAA,WAAA,GAAA,IACEA,EAAA,IAAAA,GAIFA,EAAA,WAAA,GAAA,IACEA,EAAAA,EAAA,QAAA,YAAA,EAAA,IAGFA,IAAA,IAAAf,EAAA,KAAAC,EAAAc,CAAA,CAAA,KACEN,GAAA,MAAAA,EAAA,CAAA,GAAAK,EAAA,OAAA,CAAA,GAAAA,EAAA,OAAA,MAAAC,CAAA,CAAA,GACF,EA8BY,OA3BdD,GAAA,CACE,KAAA,CAAA,MAAAC,CAAA,EAAAD,EAAA,OAEA,IAAAE,EAAAD,EAEAC,EAAA,SAAA,GAAA,IACEA,EAAAA,EAAA,MAAA,EAAA,EAAA,GAGFA,EAAA,SAAA,IAAA,IACEA,EAAAA,EAAA,MAAA,EAAA,EAAA,GAGFA,IAAA,MACEA,EAAA,IAGFN,GAAA,MAAAA,EAAAI,GAEAE,IAAAD,IACEN,GAAA,MAAAA,EAAA,CAAA,GAAAK,EAAA,OAAA,CAAA,GAAAA,EAAA,OAAA,MAAAE,CAAA,CAAA,GACF,EAOU,UAAA,UACE,aAAA,MACG,YAAA,MACD,KAAA,OACP,QAAA,sBACG,YAAAR,GAAA,IACoB,UAAA,EACjB,UAAA,GACA,WAAA,QACA,IAAAF,EACX,GAAAK,CACI,CAAA,CACN,CAGN"}