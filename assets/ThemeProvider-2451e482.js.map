{"version":3,"file":"ThemeProvider-2451e482.js","sources":["../../src/components/ThemeProvider/ThemeProvider.tsx"],"sourcesContent":["import {\n  createContext,\n  PropsWithChildren,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react'\n\nconst THEMES = ['dark', 'light'] as const\n\nexport type Theme = (typeof THEMES)[number]\n\nconst DEFAULT_THEME = 'dark'\nconst THEME_ATTR = 'data-theme'\nconst STORAGE_KEY = '@sequence.theme'\n\nconst getStorageKey = (scope?: string) =>\n  scope ? `${STORAGE_KEY}.${scope}` : STORAGE_KEY\n\ninterface ThemeContextValue {\n  theme: Theme\n  setTheme: (mode: Theme) => void\n}\n\ninterface ThemeProviderProps {\n  theme?: Theme\n  root?: string\n  scope?: string\n}\n\nconst getTheme = (scope?: string): Theme => {\n  const persistedTheme = localStorage.getItem(getStorageKey(scope)) as Theme\n\n  if (THEMES.includes(persistedTheme)) {\n    return persistedTheme\n  }\n\n  // else if (matchMedia(`(prefers-color-scheme: light)`).matches) {\n  //   return 'light'\n  // } else if (matchMedia(`(prefers-color-scheme: dark)`).matches) {\n  //   return 'dark'\n  // }\n\n  return DEFAULT_THEME\n}\n\nconst ThemeContext = createContext<ThemeContextValue | null>(null)\n\nexport const ThemeProvider = (props: PropsWithChildren<ThemeProviderProps>) => {\n  const [theme, setTheme] = useState<Theme>(\n    props.theme || getTheme(props.scope)\n  )\n\n  useEffect(() => {\n    // Add is-apple class\n    ;/Mac/.test(window.navigator.userAgent) &&\n      window.document.documentElement.classList.add('is-apple')\n  }, [])\n\n  // Allow prop theme override\n  useEffect(() => {\n    if (props.theme && THEMES.includes(props.theme)) {\n      setTheme(props.theme)\n    }\n  }, [props.theme])\n\n  // Set the data-theme attribtute on the document root element\n  useEffect(() => {\n    const rootEl = document.querySelector(props.root || ':root')\n\n    if (rootEl) {\n      console.log('Found', props.root || ':root')\n      rootEl.setAttribute(THEME_ATTR, theme)\n    }\n  }, [theme, props.root])\n\n  // Create the context value\n  const value: ThemeContextValue = useMemo(() => {\n    return {\n      theme,\n      setTheme: (mode: Theme) => {\n        if (THEMES.includes(mode)) {\n          // Save to local storage\n          localStorage.setItem(getStorageKey(props.scope), mode)\n\n          // Set the theme state which will cause a re-render\n          setTheme(mode)\n        }\n      },\n    }\n  }, [theme, props.scope])\n\n  return (\n    <ThemeContext.Provider value={value}>\n      {props.children}\n    </ThemeContext.Provider>\n  )\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext)\n\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider')\n  }\n\n  return context\n}\n"],"names":["THEMES","DEFAULT_THEME","THEME_ATTR","STORAGE_KEY","getStorageKey","scope","getTheme","persistedTheme","ThemeContext","createContext","ThemeProvider","props","theme","setTheme","useState","useEffect","rootEl","value","useMemo","mode","jsx","useTheme","context","useContext"],"mappings":"sFASA,MAAAA,EAAA,CAAA,OAAA,OAAA,EAIAC,EAAA,OACAC,EAAA,aACAC,EAAA,kBAEAC,EAAAC,GAAAA,EAAA,GAAAF,CAAA,IAAAE,CAAA,GAAAF,EAcAG,EAAAD,GAAA,CACE,MAAAE,EAAA,aAAA,QAAAH,EAAAC,CAAA,CAAA,EAEA,OAAAL,EAAA,SAAAO,CAAA,EACEA,EASFN,CACF,EAEAO,EAAAC,EAAAA,cAAA,IAAA,EAEOC,EAAAC,GAAA,CACL,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAA0BH,EAAA,OAAAL,EAAAK,EAAA,KAAA,CACW,EAGrCI,EAAAA,UAAA,IAAA,CAEG,MAAA,KAAA,OAAA,UAAA,SAAA,GAAA,OAAA,SAAA,gBAAA,UAAA,IAAA,UAAA,CACyD,EAAA,CAAA,CAAA,EAI5DA,EAAAA,UAAA,IAAA,CACEJ,EAAA,OAAAX,EAAA,SAAAW,EAAA,KAAA,GACEE,EAAAF,EAAA,KAAA,CACF,EAAA,CAAAA,EAAA,KAAA,CAAA,EAIFI,EAAAA,UAAA,IAAA,CACE,MAAAC,EAAA,SAAA,cAAAL,EAAA,MAAA,OAAA,EAEAK,IACE,QAAA,IAAA,QAAAL,EAAA,MAAA,OAAA,EACAK,EAAA,aAAAd,EAAAU,CAAA,EACF,EAAA,CAAAA,EAAAD,EAAA,IAAA,CAAA,EAIF,MAAAM,EAAAC,EAAAA,QAAA,KACE,CAAO,MAAAN,EACL,SAAAO,GAAA,CAEEnB,EAAA,SAAAmB,CAAA,IAEE,aAAA,QAAAf,EAAAO,EAAA,KAAA,EAAAQ,CAAA,EAGAN,EAAAM,CAAA,EACF,CACF,GACF,CAAAP,EAAAD,EAAA,KAAA,CAAA,EAGF,OAAAS,EAAA,IAAAZ,EAAA,SAAA,CAAA,MAAAS,EAAA,SAAAN,EAAA,QAAA,CAAA,CAKF,EAEOU,EAAA,IAAA,CACL,MAAAC,EAAAC,aAAAf,CAAA,EAEA,GAAA,CAAAc,EACE,MAAA,IAAA,MAAA,8CAAA,EAGF,OAAAA,CACF"}