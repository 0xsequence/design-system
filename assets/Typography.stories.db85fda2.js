var d=Object.defineProperty;var a=(p,o)=>d(p,"name",{value:o,configurable:!0});import"./jsx-runtime.08aeaa9a.js";import{c as t,A as x,M as y}from"./Props.622dd875.js";import"./iframe.879686e0.js";import"./Avatar.09d5f799.js";import"./Badge.77937943.js";import"./Box.fc9625ad.js";import"./Button.407d5b47.js";/* empty css                             *//* empty css                              */import"./Collapsible.12b5846e.js";import"./ControlledTextInput.5c52bfec.js";import"./Group.bbfed432.js";import"./IconButton.ea9d95e1.js";import"./LabelledField.8a31bea6.js";import"./Modal.0396a89e.js";import"./Row.0fda7429.js";import"./Spinner.0a743a37.js";import"./Stack.0b8cf7de.js";import"./Switch.7e67b98d.js";import"./Tabs.a76be7db.js";import"./TabbedNav.8c4ca364.js";import"./Tag.9a497b4c.js";import{T as e}from"./Text.f66da417.js";import"./TextInput.7b76a1c1.js";import"./ThemeProvider.aaba265a.js";import"./TokenImage.414a0f44.js";import"./Tooltip.e3ef21a3.js";import"./string.07e6f657.js";import"./index.efc987b5.js";import"./es.map.constructor.50d8f22c.js";import"./es.number.to-fixed.c3da2e1f.js";import"./index.3f9518bc.js";import"./vanilla-extract-recipes-createRuntimeFn.esm.e63f122f.js";import"./atoms.css.b06098ab.js";import"./index.module.d71f06db.js";import"./index.37a7b8f5.js";import"./index.module.3e6cd5bc.js";import"./index.module.2edb3662.js";import"./WarningIcon.1d738e58.js";import"./index.e4b53d4c.js";import"./tslib.es6.03b483f6.js";import"./index.module.18a40af4.js";import"./index.d2da1230.js";import"./Scroll.f30238ef.js";import"./index.module.36e8a29c.js";import"./index.module.cdaa1a28.js";import"./index.module.b1eb796d.js";import"./index.module.7c56ec23.js";function s(){return s=Object.assign?Object.assign.bind():function(p){for(var o=1;o<arguments.length;o++){var n=arguments[o];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(p[i]=n[i])}return p},s.apply(this,arguments)}a(s,"_extends");const r="The quick brown fox jumps over the lazy dog",u={sampleText:r},g="wrapper";function l({components:p,...o}){return t(g,s({},u,o,{components:p,mdxType:"MDXLayout"}),t(y,{title:"Design System/Typography",mdxType:"Meta"}),t("h1",null,"Typography"),t("p",null,"The defined set of typefaces and used in the design system."),t("p",null,t("strong",{parentName:"p"},"xlarge")),t(e,{variant:"xlarge",mdxType:"Text"},r),t("p",null,t("strong",{parentName:"p"},"large")),t(e,{variant:"large",mdxType:"Text"},r),t("p",null,t("strong",{parentName:"p"},"medium")),t(e,{variant:"medium",mdxType:"Text"},r),t("p",null,t("strong",{parentName:"p"},"normal")),t(e,{variant:"normal",mdxType:"Text"},r),t("p",null,t("strong",{parentName:"p"},"small")),t(e,{variant:"small",mdxType:"Text"},r),t("p",null,t("strong",{parentName:"p"},"xsmall")),t(e,{variant:"xsmall",mdxType:"Text"},r),t("p",null,t("strong",{parentName:"p"},"code")),t(e,{variant:"code",mdxType:"Text"},r))}a(l,"MDXContent");l.isMDXComponent=!0;const T=a(()=>{throw new Error("Docs-only story")},"__page");T.parameters={docsOnly:!0};const m={title:"Design System/Typography",includeStories:["__page"]},c={};m.parameters=m.parameters||{};m.parameters.docs={...m.parameters.docs||{},page:()=>t(x,{mdxStoryNameToKey:c,mdxComponentAnnotations:m},t(l,null))};const yt=["sampleText","__page"];export{yt as __namedExportsOrder,T as __page,m as default,r as sampleText};
//# sourceMappingURL=Typography.stories.db85fda2.js.map
