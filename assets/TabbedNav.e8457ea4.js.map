{"version":3,"file":"TabbedNav.e8457ea4.js","sources":["../../src/components/TabbedNav/TabbedNav.tsx"],"sourcesContent":["import { clsx } from 'clsx'\nimport { ComponentType, MouseEvent, ReactNode, useState } from 'react'\n\nimport { Box, PolymorphicProps } from '~/components/Box'\nimport { Button } from '~/components/Button'\nimport { IconProps } from '~/icons/types'\n\nimport * as styles from './styles.css'\n\nexport type TabOption = {\n  label: ReactNode\n  leftIcon?: ComponentType<IconProps>\n  value: string\n  disabled?: boolean\n  onLoad?: () => boolean | Promise<boolean>\n}\n\ntype TabbedNavProps = {\n  defaultValue?: string\n  size?: 'xs' | 'sm'\n  tabs: TabOption[]\n  onTabChange?: (value: string) => void\n}\n\nexport const TabbedNav = (props: PolymorphicProps<TabbedNavProps, 'div'>) => {\n  const {\n    className,\n    defaultValue,\n    size = 'sm',\n    tabs,\n    onTabChange,\n    ...rest\n  } = props\n\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n  const [value, setValue] = useState<string>(defaultValue ?? tabs[0].value)\n\n  const handleTabClick = async (\n    event: MouseEvent<HTMLButtonElement>,\n    option: TabOption,\n    tabIndex: number\n  ) => {\n    event.preventDefault()\n\n    const prevValue = value\n\n    if (value === option.value) {\n      return\n    }\n\n    setValue(tabs[tabIndex].value)\n\n    setIsLoading(true)\n\n    const loadSucceeded = option.onLoad ? await option.onLoad?.() : true\n\n    setIsLoading(false)\n\n    if (loadSucceeded) {\n      onTabChange?.(option.value)\n    } else {\n      setValue(prevValue)\n    }\n  }\n\n  return (\n    <Box as=\"nav\" {...rest}>\n      <Box as=\"ul\" gap=\"2\">\n        {tabs.map((option, tabIndex) => (\n          <Box as=\"li\" key={tabIndex}>\n            <Button\n              className={clsx(\n                className,\n                styles.tab({ active: option.value === value })\n              )}\n              variant=\"base\"\n              disabled={isLoading || option.disabled}\n              label={option.label}\n              leftIcon={option.leftIcon ?? undefined}\n              onClick={(ev: MouseEvent<HTMLButtonElement>) =>\n                handleTabClick(ev, option, tabIndex)\n              }\n              paddingLeft={option.leftIcon ? '1' : '2'}\n              size={size}\n              borderRadius=\"circle\"\n            />\n          </Box>\n        ))}\n      </Box>\n    </Box>\n  )\n}\n"],"names":["TabbedNav","__name","props","className","defaultValue","tabs","onTabChange","rest","isLoading","setIsLoading","useState","value","setValue","handleTabClick","event","option","tabIndex","prevValue","loadSucceeded","_a","_jsx","Box","Button","clsx","styles.tab","disabled","label","undefined","size"],"mappings":"+jBAwBO,MAAAA,EAAAC,EAAAC,GAAA,CACL,KAAA,CAAM,UAAAC,EACJA,aAAAA,EACAC,KAAAA,EAAAA,KACO,KAAAC,EACPA,YAAAA,KACAC,CACGC,EAAAA,EAGL,CAAAC,EAAAC,CAAA,EAAAC,EAAA,QAAA,SAAA,EAAA,EACA,CAAAC,EAAAC,CAAA,EAAAF,EAAA,QAAA,SAAAN,GAAA,KAAAA,EAAAC,EAAA,GAAA,KAAA,EAEAQ,EAAAZ,EAAA,MAAAa,EAAAC,EAAAC,IAAA,OAKEF,EAAAA,eAAAA,EAEA,MAAAG,EAAAN,EAEA,GAAAA,IAAAI,EAAA,MACE,OAGFH,EAAAA,EAAAA,GAAAA,KAAAA,EAEAH,EAAAA,EAAAA,EAEA,MAAAS,EAAAH,EAAA,OAAA,OAAAI,EAAAJ,EAAA,SAAA,YAAAI,EAAA,KAAAJ,IAAA,GAEAN,EAAAA,EAAAA,EAEAS,EACEZ,GAAAA,MAAAA,EAAAA,EAAAA,OAEAM,EAAAA,CAAAA,CACF,EAzBF,kBA4BA,OAAAQ,EAAAC,EAAA,CACM,GAAA,MAAI,GAAAd,EAAUA,SAAAA,EAAAA,EAAAA,CACZ,GAAA,KAAI,IAAA,IAAS,SAAAF,EAAA,IAAA,CAAAU,EAAAC,IAAA,OAAAI,OAAAA,EAAAC,EAAA,CAET,GAAA,KAAI,SAAAD,EAAAE,EAAA,CACC,UAAAC,EAAApB,EAAAqB,EAAA,CAGQ,OAAAT,EAAA,QAAAJ,CAA2BA,CAAAA,CAAAA,EAAQ,QAAA,OAExC,SAAAH,GAAAO,EAAA,SACsBU,MAAAA,EAAAA,MAChBC,UAAAA,EAAAA,EAAAA,WAAAA,KAAAA,EAAAA,OACeC,QAAAA,GAAAA,EAAAA,EAAAA,EAAAA,CAAAA,EAEQ,YAAAZ,EAAA,SAAA,IAAA,IAEA,KAAAa,EACrC,aAAA,QACa,CAAA,CAAQ,EAAAZ,CAAA,EAAA,CAG1B,CAAA,CAAC,CAAA,CAIV,EAnEO"}