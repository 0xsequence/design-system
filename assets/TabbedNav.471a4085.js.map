{"version":3,"file":"TabbedNav.471a4085.js","sources":["../../src/components/TabbedNav/TabbedNav.tsx"],"sourcesContent":["import { clsx } from 'clsx'\nimport { ComponentType, MouseEvent, ReactNode, useState } from 'react'\n\nimport { Box, PolymorphicProps } from '~/components/Box'\nimport { Button } from '~/components/Button'\nimport { IconProps } from '~/icons/types'\n\nimport * as styles from './styles.css'\n\nexport type TabOption = {\n  label: ReactNode\n  LeftIcon?: ComponentType<IconProps>\n  value: string\n  onClick?: () => boolean | Promise<boolean>\n}\n\ntype TabSelectProps = {\n  activeTab?: string\n  size?: 'xs' | 'sm'\n  tabs: TabOption[]\n}\n\nexport const TabbedNav = (props: PolymorphicProps<TabSelectProps, 'div'>) => {\n  const { className, activeTab, size = 'sm', tabs, ...rest } = props\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n  const [activeTabValue, setActiveTabValue] = useState<string>(\n    activeTab ?? tabs[0].value\n  )\n\n  const handleTabClick = async (\n    event: MouseEvent<HTMLButtonElement>,\n    option: TabOption,\n    tabIndex: number\n  ) => {\n    event.preventDefault()\n\n    if (activeTabValue === option.value) {\n      return\n    }\n\n    const prevTab = activeTabValue\n    setActiveTabValue(tabs[tabIndex].value)\n    setIsLoading(true)\n    const loadSucceeded = await option.onClick?.()\n    setIsLoading(false)\n\n    if (!loadSucceeded) {\n      setActiveTabValue(prevTab)\n    }\n  }\n\n  return (\n    <Box as=\"nav\" {...rest}>\n      <Box as=\"ul\" gap=\"2\">\n        {tabs.map((option, tabIndex) => (\n          <Box as=\"li\" key={tabIndex}>\n            <Button\n              className={clsx(\n                className,\n                styles.tab({ active: option.value === activeTabValue })\n              )}\n              variant=\"base\"\n              disabled={isLoading}\n              label={option.label}\n              LeftIcon={option.LeftIcon ?? undefined}\n              onClick={(e: MouseEvent<HTMLButtonElement>) =>\n                handleTabClick(e, option, tabIndex)\n              }\n              paddingLeft={option.LeftIcon ? '1' : '2'}\n              size={size}\n              borderRadius=\"circle\"\n            />\n          </Box>\n        ))}\n      </Box>\n    </Box>\n  )\n}\n"],"names":["TabbedNav","__name","props","className","activeTab","tabs","rest","isLoading","setIsLoading","useState","activeTabValue","setActiveTabValue","handleTabClick","event","option","tabIndex","prevTab","loadSucceeded","_a","_jsx","Box","Button","clsx","styles.tab","label","undefined","size"],"mappings":"ujBAsBO,MAAAA,EAAAC,EAAAC,GAAA,CACL,KAAA,CAAM,UAAAC,EAAEA,UAAAA,EAAWC,KAAAA,EAAAA,KAAkB,KAAAC,KAAMA,CAASC,EAAAA,EACpD,CAAAC,EAAAC,CAAA,EAAAC,EAAA,QAAA,SAAA,EAAA,EACA,CAAAC,EAAAC,CAAA,EAAAF,EAAA,QAAA,SAAAL,GAAA,KAAAA,EAAAC,EAAA,GAAA,KAAA,EAIAO,EAAAX,EAAA,MAAAY,EAAAC,EAAAC,IAAA,OAOE,GAFAF,EAAAA,eAAAA,EAEAH,IAAAI,EAAA,MACE,OAGF,MAAAE,EAAAN,EACAC,EAAAA,EAAAA,GAAAA,KAAAA,EACAH,EAAAA,EAAAA,EACA,MAAAS,EAAA,OAAAC,EAAAJ,EAAA,UAAA,YAAAI,EAAA,KAAAJ,IACAN,EAAAA,EAAAA,EAEAS,GACEN,EAAAA,CAAAA,CACF,EAnBF,kBAsBA,OAAAQ,EAAAC,EAAA,CACM,GAAA,MAAI,GAAAd,EAAUA,SAAAA,EAAAA,EAAAA,CACZ,GAAA,KAAI,IAAA,IAAS,SAAAD,EAAA,IAAA,CAAAS,EAAAC,IAAA,OAAAI,OAAAA,EAAAC,EAAA,CAET,GAAA,KAAI,SAAAD,EAAAE,EAAA,CACC,UAAAC,EAAAnB,EAAAoB,EAAA,CAGQ,OAAAT,EAAA,QAAAJ,CAA2BA,CAAAA,CAAAA,EAAiB,QAAA,OAEjD,SAAAH,EACEA,MAAAA,EAAAA,MACIiB,UAAAA,EAAAA,EAAAA,WAAAA,KAAAA,EAAAA,OACeC,QAAAA,GAAAA,EAAAA,EAAAA,EAAAA,CAAAA,EAEO,YAAAX,EAAA,SAAA,IAAA,IAEC,KAAAY,EACrC,aAAA,QACa,CAAA,CAAQ,EAAAX,CAAA,EAAA,CAG1B,CAAA,CAAC,CAAA,CAIV,EAvDO"}